// Generated by CoffeeScript 1.6.1
(function() {
  var checksumCalculator, crypto, fs, path, request, slugify, thumbnail, url, util, widows, _,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  fs = require("fs");

  path = require("path");

  util = require("util");

  url = require("url");

  request = require("request");

  crypto = require("crypto");

  _ = require("underscore");

  require('./requireMarkdown');

  exports.nav = function(root) {
    var key, node, nodes;
    nodes = (function() {
      var _ref, _ref1, _results;
      _ref = root.files;
      _results = [];
      for (key in _ref) {
        node = _ref[key];
        if ((_ref1 = node.type) === "directory" || _ref1 === "page" || _ref1 === "image" || _ref1 === "index") {
          _results.push(node);
        }
      }
      return _results;
    })();
    return nodes.sort(function(a, b) {
      if (a.file === b.file) {
        return 0;
      } else if (a.type === 'index') {
        return -1;
      } else if (b.type === 'index') {
        return 1;
      } else if (a.file < b.file) {
        return -1;
      } else {
        return 1;
      }
    });
  };

  exports.include = function(file) {
    try {
      return require(path.join(this.basePath, path.dirname(this.filePath), file))(this);
    } catch (e) {
      return "";
    }
  };

  exports.formatDate = require("dateformat");

  widows = /([^<>\s]+?[^\s"])\s+((?:<[^>]+>|\S)+)$/g;

  exports.widont = function(s) {
    return s.replace(widows, "$1&nbsp;$2");
  };

  exports.render = function(obj, extraContext) {
    var context, render, templates;
    context = {};
    _.extend(context, this);
    _.extend(context, obj);
    if (extraContext) {
      _.extend(context, extraContext);
    }
    render = function(templates, body) {
      var remaining, template, _i;
      if (!templates.length) {
        return body;
      }
      if (body) {
        context.body = body;
      }
      remaining = 2 <= templates.length ? __slice.call(templates, 0, _i = templates.length - 1) : (_i = 0, []), template = templates[_i++];
      return render(remaining, require(template)(context));
    };
    templates = this.parent.templates.slice(0);
    if (obj.template) {
      templates.push(obj.template);
    }
    return render(templates);
  };

  exports.sort = function(items, field, reverse) {
    var value;
    value = reverse ? -1 : 1;
    return [].concat(items).sort(function(a, b) {
      if (a[field] > b[field]) {
        return value;
      } else if (a[field] < b[field]) {
        return -value;
      } else {
        return 0;
      }
    });
  };

  exports.url = _.memoize(function(path) {
    return "http://" + this.hostname + "/" + (path || "");
  });

  thumbnail = function(file, width, height) {
    var convert, getName, read, thumbnailName, thumbnailPath,
      _this = this;
    if (height == null) {
      height = width;
    }
    getName = function(file) {
      var base;
      base = path.join(path.dirname(file), path.basename(file, path.extname(file)));
      return "" + base + "_" + width + "_" + height + ".png";
    };
    if (/^(http(s)?|ftp):\/\//i.test(file)) {
      thumbnailName = getName(url.parse(file).pathname.slice(1).replace(/\//g, "_"));
      read = function(next) {
        return request.get({
          uri: file,
          encoding: "binary"
        }, function(err, response, body) {
          var _ref;
          if (err || !((200 <= (_ref = response.statusCode) && _ref < 400))) {
            return console.error(err, response.statusCode);
          } else {
            return next(new Buffer(body, "binary"));
          }
        });
      };
    } else {
      thumbnailName = getName(file);
      read = function(next) {
        return fs.readFile(path.join(_this.directory, path.basename(file)), function(err, data) {
          if (err) {
            return console.error("THUMB", err);
          }
          return next(data);
        });
      };
    }
    thumbnailPath = path.join(this.directory, thumbnailName);
    convert = function(data) {
      var Canvas, canvas, ctx, img, out, ratio, scaledHeight, scaledWidth;
      Canvas = require("canvas");
      img = new Canvas.Image();
      img.src = data;
      ratio = Math.min(width / img.width, height / img.height);
      scaledWidth = Math.round(ratio * img.width);
      scaledHeight = Math.round(ratio * img.height);
      canvas = new Canvas(scaledWidth, scaledHeight);
      ctx = canvas.getContext("2d");
      ctx.drawImage(img, 0, 0, scaledWidth, scaledHeight);
      out = fs.createWriteStream(thumbnailPath);
      return canvas.createPNGStream().pipe(out);
    };
    fs.exists(thumbnailPath, function(exists) {
      if (!exists) {
        return read(convert);
      }
    });
    return thumbnailName;
  };

  exports.thumbnail = _.memoize(thumbnail, function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return args.join("::");
  });

  checksumCalculator = function(base) {
    var cache;
    cache = {};
    return function(file) {
      var contents;
      if (__indexOf.call(cache, file) < 0) {
        contents = fs.readFileSync(path.join(base, file.slice(1)));
        cache[file] = crypto.createHash("md5").update(contents).digest("base64").replace(/\=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
      }
      return cache[file];
    };
  };

  exports.checksum = function(file) {
    var calculate, checksum;
    calculate = checksumCalculator(this.outPath);
    try {
      checksum = calculate(file);
      return file + "?" + checksum;
    } catch (e) {
      return file;
    }
  };

  slugify = function(str) {
    var regex, replacement, slug, _ref;
    slug = str.toLowerCase();
    _ref = slugify.replaces;
    for (replacement in _ref) {
      regex = _ref[replacement];
      slug = slug.replace(regex, replacement);
    }
    return slug.replace(/[^\w-\.]/g, '').replace(/-+/g, '-');
  };

  slugify.replaces = {
    'a': /[åäàáâ]/g,
    'c': /ç/g,
    'e': /[éèëê]/g,
    'i': /[ìíïî]/g,
    'u': /[üû]/g,
    'o': /[öô]/g,
    '-': new RegExp(' ', 'g')
  };

  exports.slugify = slugify;

  exports.groupBy = _.groupBy;

}).call(this);
